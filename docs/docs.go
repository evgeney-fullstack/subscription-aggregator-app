// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/subscriptions": {
            "get": {
                "description": "Get all subscriptions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Get all subscriptions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.getAllSubResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new subscription with the input payload",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Create a new subscription",
                "parameters": [
                    {
                        "description": "Subscription input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Subscription"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "subId",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/total-cost": {
            "get": {
                "description": "Get subscription summary with filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Get subscription summary",
                "parameters": [
                    {
                        "description": "Filter criteria",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SubscriptionFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SubscriptionFilter"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            }
        },
        "/subscriptions/{subscription_id}": {
            "get": {
                "description": "Get subscription by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Get subscription by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Subscription"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Update subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UpdateSubscription"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscriptions"
                ],
                "summary": "Delete subscription",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Subscription ID",
                        "name": "subscription_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handler.statusResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/handler.errorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handler.errorResponse": {
            "description": "Error response",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "handler.getAllSubResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Array of subscription objects",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Subscription"
                    }
                }
            }
        },
        "handler.statusResponse": {
            "description": "Status response",
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                }
            }
        },
        "models.Filters": {
            "type": "object",
            "properties": {
                "service_name": {
                    "description": "Optional filter by service name",
                    "type": "string"
                },
                "user_id": {
                    "description": "Optional filter by user ID",
                    "type": "string"
                }
            }
        },
        "models.Period": {
            "type": "object",
            "required": [
                "finish_date",
                "start_date"
            ],
            "properties": {
                "finish_date": {
                    "description": "End date in MM-YYYY format",
                    "type": "string"
                },
                "start_date": {
                    "description": "Start date in MM-YYYY format",
                    "type": "string"
                }
            }
        },
        "models.Subscription": {
            "description": "Subscription information",
            "type": "object",
            "required": [
                "price",
                "service_name",
                "start_date",
                "user_id"
            ],
            "properties": {
                "finish_date": {
                    "description": "End date as timestamp",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier",
                    "type": "integer"
                },
                "price": {
                    "description": "Subscription price (required)",
                    "type": "integer"
                },
                "service_name": {
                    "description": "Name of the service (required)",
                    "type": "string"
                },
                "start_date": {
                    "description": "Start date in string format (required)",
                    "type": "string"
                },
                "user_id": {
                    "description": "User identifier as string (required)",
                    "type": "string"
                }
            }
        },
        "models.SubscriptionFilter": {
            "description": "Subscription filter criteria",
            "type": "object",
            "properties": {
                "currency": {
                    "description": "Currency code for the total cost (output only)",
                    "type": "string"
                },
                "filters": {
                    "description": "Optional filters for the summary (input)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Filters"
                        }
                    ]
                },
                "period": {
                    "description": "Time period for the summary calculation (input)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Period"
                        }
                    ]
                },
                "total_cost": {
                    "description": "Calculated total cost of subscriptions (output only)",
                    "type": "integer"
                }
            }
        },
        "models.UpdateSubscription": {
            "description": "Subscription update data",
            "type": "object",
            "properties": {
                "price": {
                    "description": "Optional new price value (pointer allows nil for no update)",
                    "type": "integer"
                },
                "start_date": {
                    "description": "Optional new start date in \"MM-YYYY\" format",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Subscription Aggregator API",
	Description:      "API для агрегатора подписок",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
